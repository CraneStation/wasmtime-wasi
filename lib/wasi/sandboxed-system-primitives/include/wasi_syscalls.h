// Copyright (c) 2016-2017 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
#ifdef WASMTIME_UNMODIFIED
// This file is automatically generated. Do not edit.
#endif
//
// Source: https://github.com/NuxiNL/cloudabi

#ifndef WASI_SYSCALLS_H
#define WASI_SYSCALLS_H

#include "wasi_types.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WASMTIME_UNMODIFIED
#define WASMTIME_CURFDS_PARAM
#define WASMTIME_CURTID_PARAM
#define WASMTIME_CONTEXT_PARAMS
#define WASMTIME_SYSCALL_NAME(name) wasi_ ## name
#else
#define WASMTIME_CURFDS_PARAM struct fd_table *curfds,
#define WASMTIME_CURTID_PARAM wasi_tid_t curtid,
#define WASMTIME_CONTEXT_PARAMS \
    WASMTIME_CURFDS_PARAM \
    WASMTIME_CURTID_PARAM
#define WASMTIME_SYSCALL_NAME(name) wasmtime_ssp_ ## name
#endif

wasi_errno_t WASMTIME_SYSCALL_NAME(clock_res_get)(wasi_clockid_t clock_id,
                                            wasi_timestamp_t *resolution);

wasi_errno_t WASMTIME_SYSCALL_NAME(clock_time_get)(wasi_clockid_t clock_id,
                                             wasi_timestamp_t precision,
                                             wasi_timestamp_t *time);

wasi_errno_t WASMTIME_SYSCALL_NAME(condvar_signal)(_Atomic(wasi_condvar_t) *
                                                 condvar,
                                             wasi_scope_t scope,
                                             wasi_nthreads_t nwaiters);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_close)(WASMTIME_CURFDS_PARAM wasi_fd_t fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_create1)(WASMTIME_CURFDS_PARAM wasi_filetype_t type,
                                         wasi_fd_t *fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_create2)(WASMTIME_CURFDS_PARAM wasi_filetype_t type,
                                         wasi_fd_t *fd1,
                                         wasi_fd_t *fd2);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_datasync)(WASMTIME_CURFDS_PARAM wasi_fd_t fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_dup)(WASMTIME_CURFDS_PARAM wasi_fd_t from, wasi_fd_t *fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_pread)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                       const wasi_iovec_t *iovs,
                                       size_t iovs_len,
                                       wasi_filesize_t offset,
                                       size_t *nread);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_pwrite)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                        const wasi_ciovec_t *iovs,
                                        size_t iovs_len,
                                        wasi_filesize_t offset,
                                        size_t *nwritten);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_read)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                      const wasi_iovec_t *iovs,
                                      size_t iovs_len, size_t *nread);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_replace)(WASMTIME_CURFDS_PARAM wasi_fd_t from, wasi_fd_t to);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_seek)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                      wasi_filedelta_t offset,
                                      wasi_whence_t whence,
                                      wasi_filesize_t *newoffset);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_stat_get)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                          wasi_fdstat_t *buf);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_stat_put)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                          const wasi_fdstat_t *buf,
                                          wasi_fdsflags_t flags);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_sync)(WASMTIME_CURFDS_PARAM wasi_fd_t fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(fd_write)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                       const wasi_ciovec_t *iovs,
                                       size_t iovs_len, size_t *nwritten);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_advise)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                          wasi_filesize_t offset,
                                          wasi_filesize_t len,
                                          wasi_advice_t advice);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_allocate)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                            wasi_filesize_t offset,
                                            wasi_filesize_t len);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_create)(WASMTIME_CURFDS_PARAM wasi_fd_t fd, const char *path,
                                          size_t path_len,
                                          wasi_filetype_t type);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_link)(WASMTIME_CURFDS_PARAM wasi_lookup_t fd1,
                                        const char *path1, size_t path1_len,
                                        wasi_fd_t fd2, const char *path2,
                                        size_t path2_len);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_open)(WASMTIME_CURFDS_PARAM wasi_lookup_t dirfd,
                                        const char *path, size_t path_len,
                                        wasi_oflags_t oflags,
                                        const wasi_fdstat_t *fds,
                                        wasi_fd_t *fd);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_readdir)(WASMTIME_CURFDS_PARAM wasi_fd_t fd, void *buf,
                                           size_t buf_len,
                                           wasi_dircookie_t cookie,
                                           size_t *bufused);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_readlink)(WASMTIME_CURFDS_PARAM wasi_fd_t fd, const char *path,
                                            size_t path_len, char *buf,
                                            size_t buf_len, size_t *bufused);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_rename)(WASMTIME_CURFDS_PARAM wasi_fd_t fd1, const char *path1,
                                          size_t path1_len, wasi_fd_t fd2,
                                          const char *path2, size_t path2_len);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_stat_fget)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                             wasi_filestat_t *buf);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_stat_fput)(WASMTIME_CURFDS_PARAM wasi_fd_t fd,
                                             const wasi_filestat_t *buf,
                                             wasi_fsflags_t flags);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_stat_get)(WASMTIME_CURFDS_PARAM wasi_lookup_t fd,
                                            const char *path, size_t path_len,
                                            wasi_filestat_t *buf);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_stat_put)(WASMTIME_CURFDS_PARAM wasi_lookup_t fd,
                                            const char *path, size_t path_len,
                                            const wasi_filestat_t *buf,
                                            wasi_fsflags_t flags);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_symlink)(WASMTIME_CURFDS_PARAM const char *path1, size_t path1_len,
                                           wasi_fd_t fd, const char *path2,
                                           size_t path2_len);

wasi_errno_t WASMTIME_SYSCALL_NAME(file_unlink)(WASMTIME_CURFDS_PARAM wasi_fd_t fd, const char *path,
                                          size_t path_len,
                                          wasi_ulflags_t flags);

wasi_errno_t WASMTIME_SYSCALL_NAME(lock_unlock)(WASMTIME_CURTID_PARAM _Atomic(wasi_lock_t) * lock,
                                          wasi_scope_t scope);

wasi_errno_t WASMTIME_SYSCALL_NAME(mem_advise)(void *mapping, size_t mapping_len,
                                         wasi_advice_t advice);

wasi_errno_t WASMTIME_SYSCALL_NAME(mem_map)(WASMTIME_CURFDS_PARAM void *addr, size_t len,
                                      wasi_mprot_t prot,
                                      wasi_mflags_t flags, wasi_fd_t fd,
                                      wasi_filesize_t off, void **mem);

wasi_errno_t WASMTIME_SYSCALL_NAME(mem_protect)(void *mapping, size_t mapping_len,
                                          wasi_mprot_t prot);

wasi_errno_t WASMTIME_SYSCALL_NAME(mem_sync)(void *mapping, size_t mapping_len,
                                       wasi_msflags_t flags);

wasi_errno_t WASMTIME_SYSCALL_NAME(mem_unmap)(void *mapping, size_t mapping_len);

wasi_errno_t WASMTIME_SYSCALL_NAME(poll)(WASMTIME_CURFDS_PARAM const wasi_subscription_t *in,
                                   wasi_event_t *out, size_t nsubscriptions,
                                   size_t *nevents);

wasi_errno_t WASMTIME_SYSCALL_NAME(proc_exec)(wasi_fd_t fd, const void *data,
                                        size_t data_len,
                                        const wasi_fd_t *fds,
                                        size_t fds_len);

_Noreturn void WASMTIME_SYSCALL_NAME(proc_exit)(wasi_exitcode_t rval);

wasi_errno_t WASMTIME_SYSCALL_NAME(proc_fork)(wasi_fd_t *fd, wasi_tid_t *tid);

wasi_errno_t WASMTIME_SYSCALL_NAME(proc_raise)(wasi_signal_t sig);

wasi_errno_t WASMTIME_SYSCALL_NAME(random_get)(void *buf, size_t buf_len);

wasi_errno_t WASMTIME_SYSCALL_NAME(sock_recv)(WASMTIME_CURFDS_PARAM wasi_fd_t sock,
                                        const wasi_recv_in_t *in,
                                        wasi_recv_out_t *out);

wasi_errno_t WASMTIME_SYSCALL_NAME(sock_send)(WASMTIME_CURFDS_PARAM wasi_fd_t sock,
                                        const wasi_send_in_t *in,
                                        wasi_send_out_t *out);

wasi_errno_t WASMTIME_SYSCALL_NAME(sock_shutdown)(WASMTIME_CURFDS_PARAM wasi_fd_t sock,
                                            wasi_sdflags_t how);

wasi_errno_t WASMTIME_SYSCALL_NAME(thread_create)(WASMTIME_CURFDS_PARAM wasi_threadattr_t *attr,
                                            wasi_tid_t *tid);

_Noreturn void WASMTIME_SYSCALL_NAME(thread_exit)(WASMTIME_CURTID_PARAM _Atomic(wasi_lock_t) * lock,
                                        wasi_scope_t scope);

wasi_errno_t WASMTIME_SYSCALL_NAME(thread_yield)(void);

#ifdef __cplusplus
}  // extern "C"
#endif

#endif
