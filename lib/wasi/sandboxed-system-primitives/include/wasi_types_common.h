// Copyright (c) 2016-2017 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// This file is automatically generated. Do not edit.
//
// Source: https://github.com/NuxiNL/cloudabi

#ifndef WASI_TYPES_COMMON_H
#define WASI_TYPES_COMMON_H

#if defined(__FreeBSD__) && defined(_KERNEL)
#include <sys/types.h>
#elif defined(__linux__) && defined(__KERNEL__)
#include <linux/types.h>
#else
#include <stddef.h>
#include <stdint.h>
#endif

// Make this code build with g++.
#if defined(__cplusplus) && defined(__GNUC__) && !defined(__clang__)
#define _Alignas alignas
#define _Alignof alignof
#define _Atomic(x) x
#define _Static_assert static_assert
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef uint8_t wasi_advice_t;
#define WASI_ADVICE_DONTNEED   1
#define WASI_ADVICE_NOREUSE    2
#define WASI_ADVICE_NORMAL     3
#define WASI_ADVICE_RANDOM     4
#define WASI_ADVICE_SEQUENTIAL 5
#define WASI_ADVICE_WILLNEED   6

typedef uint32_t wasi_auxtype_t;
#define WASI_AT_ARGDATA      256
#define WASI_AT_ARGDATALEN   257
#define WASI_AT_BASE           7
#define WASI_AT_CANARY       258
#define WASI_AT_CANARYLEN    259
#define WASI_AT_NCPUS        260
#define WASI_AT_NULL           0
#define WASI_AT_PAGESZ         6
#define WASI_AT_PHDR           3
#define WASI_AT_PHNUM          4
#define WASI_AT_PID          263
#define WASI_AT_SYSINFO_EHDR 262
#define WASI_AT_TID          261

typedef uint32_t wasi_clockid_t;
#define WASI_CLOCK_MONOTONIC          1
#define WASI_CLOCK_PROCESS_CPUTIME_ID 2
#define WASI_CLOCK_REALTIME           3
#define WASI_CLOCK_THREAD_CPUTIME_ID  4

typedef uint32_t wasi_condvar_t;
#define WASI_CONDVAR_HAS_NO_WAITERS 0

typedef uint64_t wasi_device_t;

typedef uint64_t wasi_dircookie_t;
#define WASI_DIRCOOKIE_START 0

typedef uint16_t wasi_errno_t;
#define WASI_ESUCCESS         0
#define WASI_E2BIG            1
#define WASI_EACCES           2
#define WASI_EADDRINUSE       3
#define WASI_EADDRNOTAVAIL    4
#define WASI_EAFNOSUPPORT     5
#define WASI_EAGAIN           6
#define WASI_EALREADY         7
#define WASI_EBADF            8
#define WASI_EBADMSG          9
#define WASI_EBUSY           10
#define WASI_ECANCELED       11
#define WASI_ECHILD          12
#define WASI_ECONNABORTED    13
#define WASI_ECONNREFUSED    14
#define WASI_ECONNRESET      15
#define WASI_EDEADLK         16
#define WASI_EDESTADDRREQ    17
#define WASI_EDOM            18
#define WASI_EDQUOT          19
#define WASI_EEXIST          20
#define WASI_EFAULT          21
#define WASI_EFBIG           22
#define WASI_EHOSTUNREACH    23
#define WASI_EIDRM           24
#define WASI_EILSEQ          25
#define WASI_EINPROGRESS     26
#define WASI_EINTR           27
#define WASI_EINVAL          28
#define WASI_EIO             29
#define WASI_EISCONN         30
#define WASI_EISDIR          31
#define WASI_ELOOP           32
#define WASI_EMFILE          33
#define WASI_EMLINK          34
#define WASI_EMSGSIZE        35
#define WASI_EMULTIHOP       36
#define WASI_ENAMETOOLONG    37
#define WASI_ENETDOWN        38
#define WASI_ENETRESET       39
#define WASI_ENETUNREACH     40
#define WASI_ENFILE          41
#define WASI_ENOBUFS         42
#define WASI_ENODEV          43
#define WASI_ENOENT          44
#define WASI_ENOEXEC         45
#define WASI_ENOLCK          46
#define WASI_ENOLINK         47
#define WASI_ENOMEM          48
#define WASI_ENOMSG          49
#define WASI_ENOPROTOOPT     50
#define WASI_ENOSPC          51
#define WASI_ENOSYS          52
#define WASI_ENOTCONN        53
#define WASI_ENOTDIR         54
#define WASI_ENOTEMPTY       55
#define WASI_ENOTRECOVERABLE 56
#define WASI_ENOTSOCK        57
#define WASI_ENOTSUP         58
#define WASI_ENOTTY          59
#define WASI_ENXIO           60
#define WASI_EOVERFLOW       61
#define WASI_EOWNERDEAD      62
#define WASI_EPERM           63
#define WASI_EPIPE           64
#define WASI_EPROTO          65
#define WASI_EPROTONOSUPPORT 66
#define WASI_EPROTOTYPE      67
#define WASI_ERANGE          68
#define WASI_EROFS           69
#define WASI_ESPIPE          70
#define WASI_ESRCH           71
#define WASI_ESTALE          72
#define WASI_ETIMEDOUT       73
#define WASI_ETXTBSY         74
#define WASI_EXDEV           75
#define WASI_ENOTCAPABLE     76

typedef uint16_t wasi_eventrwflags_t;
#define WASI_EVENT_FD_READWRITE_HANGUP 0x0001

typedef uint8_t wasi_eventtype_t;
#define WASI_EVENTTYPE_CLOCK          1
#define WASI_EVENTTYPE_CONDVAR        2
#define WASI_EVENTTYPE_FD_READ        3
#define WASI_EVENTTYPE_FD_WRITE       4
#define WASI_EVENTTYPE_LOCK_RDLOCK    5
#define WASI_EVENTTYPE_LOCK_WRLOCK    6
#define WASI_EVENTTYPE_PROC_TERMINATE 7

typedef uint32_t wasi_exitcode_t;

typedef uint32_t wasi_fd_t;
#define WASI_PROCESS_CHILD 0xffffffff
#define WASI_MAP_ANON_FD   0xffffffff

typedef uint16_t wasi_fdflags_t;
#define WASI_FDFLAG_APPEND   0x0001
#define WASI_FDFLAG_DSYNC    0x0002
#define WASI_FDFLAG_NONBLOCK 0x0004
#define WASI_FDFLAG_RSYNC    0x0008
#define WASI_FDFLAG_SYNC     0x0010

typedef uint16_t wasi_fdsflags_t;
#define WASI_FDSTAT_FLAGS  0x0001
#define WASI_FDSTAT_RIGHTS 0x0002

typedef int64_t wasi_filedelta_t;

typedef uint64_t wasi_filesize_t;

typedef uint8_t wasi_filetype_t;
#define WASI_FILETYPE_UNKNOWN            0
#define WASI_FILETYPE_BLOCK_DEVICE      16
#define WASI_FILETYPE_CHARACTER_DEVICE  17
#define WASI_FILETYPE_DIRECTORY         32
#define WASI_FILETYPE_PROCESS           80
#define WASI_FILETYPE_REGULAR_FILE      96
#define WASI_FILETYPE_SHARED_MEMORY    112
#define WASI_FILETYPE_SOCKET_DGRAM     128
#define WASI_FILETYPE_SOCKET_STREAM    130
#define WASI_FILETYPE_SYMBOLIC_LINK    144

typedef uint16_t wasi_fsflags_t;
#define WASI_FILESTAT_ATIM     0x0001
#define WASI_FILESTAT_ATIM_NOW 0x0002
#define WASI_FILESTAT_MTIM     0x0004
#define WASI_FILESTAT_MTIM_NOW 0x0008
#define WASI_FILESTAT_SIZE     0x0010

typedef uint64_t wasi_inode_t;

typedef uint32_t wasi_linkcount_t;

typedef uint32_t wasi_lock_t;
#define WASI_LOCK_UNLOCKED       0x00000000
#define WASI_LOCK_WRLOCKED       0x40000000
#define WASI_LOCK_KERNEL_MANAGED 0x80000000
#define WASI_LOCK_BOGUS          0x80000000

typedef uint32_t wasi_lookupflags_t;
#define WASI_LOOKUP_SYMLINK_FOLLOW 0x00000001

typedef uint8_t wasi_mflags_t;
#define WASI_MAP_ANON    0x01
#define WASI_MAP_FIXED   0x02
#define WASI_MAP_PRIVATE 0x04
#define WASI_MAP_SHARED  0x08

typedef uint8_t wasi_mprot_t;
#define WASI_PROT_EXEC  0x01
#define WASI_PROT_WRITE 0x02
#define WASI_PROT_READ  0x04

typedef uint8_t wasi_msflags_t;
#define WASI_MS_ASYNC      0x01
#define WASI_MS_INVALIDATE 0x02
#define WASI_MS_SYNC       0x04

typedef uint32_t wasi_nthreads_t;

typedef uint16_t wasi_oflags_t;
#define WASI_O_CREAT     0x0001
#define WASI_O_DIRECTORY 0x0002
#define WASI_O_EXCL      0x0004
#define WASI_O_TRUNC     0x0008

typedef uint16_t wasi_riflags_t;
#define WASI_SOCK_RECV_PEEK    0x0004
#define WASI_SOCK_RECV_WAITALL 0x0010

typedef uint64_t wasi_rights_t;
#define WASI_RIGHT_FD_DATASYNC           0x0000000000000001
#define WASI_RIGHT_FD_READ               0x0000000000000002
#define WASI_RIGHT_FD_SEEK               0x0000000000000004
#define WASI_RIGHT_FD_STAT_PUT_FLAGS     0x0000000000000008
#define WASI_RIGHT_FD_SYNC               0x0000000000000010
#define WASI_RIGHT_FD_TELL               0x0000000000000020
#define WASI_RIGHT_FD_WRITE              0x0000000000000040
#define WASI_RIGHT_FILE_ADVISE           0x0000000000000080
#define WASI_RIGHT_FILE_ALLOCATE         0x0000000000000100
#define WASI_RIGHT_FILE_CREATE_DIRECTORY 0x0000000000000200
#define WASI_RIGHT_FILE_CREATE_FILE      0x0000000000000400
#define WASI_RIGHT_FILE_LINK_SOURCE      0x0000000000001000
#define WASI_RIGHT_FILE_LINK_TARGET      0x0000000000002000
#define WASI_RIGHT_FILE_OPEN             0x0000000000004000
#define WASI_RIGHT_FILE_READDIR          0x0000000000008000
#define WASI_RIGHT_FILE_READLINK         0x0000000000010000
#define WASI_RIGHT_FILE_RENAME_SOURCE    0x0000000000020000
#define WASI_RIGHT_FILE_RENAME_TARGET    0x0000000000040000
#define WASI_RIGHT_FILE_STAT_FGET        0x0000000000080000
#define WASI_RIGHT_FILE_STAT_FPUT_SIZE   0x0000000000100000
#define WASI_RIGHT_FILE_STAT_FPUT_TIMES  0x0000000000200000
#define WASI_RIGHT_FILE_STAT_GET         0x0000000000400000
#define WASI_RIGHT_FILE_STAT_PUT_TIMES   0x0000000000800000
#define WASI_RIGHT_FILE_SYMLINK          0x0000000001000000
#define WASI_RIGHT_FILE_UNLINK           0x0000000002000000
#define WASI_RIGHT_MEM_MAP               0x0000000004000000
#define WASI_RIGHT_MEM_MAP_EXEC          0x0000000008000000
#define WASI_RIGHT_POLL_FD_READWRITE     0x0000000010000000
#define WASI_RIGHT_POLL_PROC_TERMINATE   0x0000000040000000
#define WASI_RIGHT_PROC_EXEC             0x0000000100000000
#define WASI_RIGHT_SOCK_SHUTDOWN         0x0000008000000000

typedef uint16_t wasi_roflags_t;
#define WASI_SOCK_RECV_FDS_TRUNCATED  0x0001
#define WASI_SOCK_RECV_DATA_TRUNCATED 0x0008

typedef uint8_t wasi_scope_t;
#define WASI_SCOPE_PRIVATE 4
#define WASI_SCOPE_SHARED  8

typedef uint8_t wasi_sdflags_t;
#define WASI_SHUT_RD 0x01
#define WASI_SHUT_WR 0x02

typedef uint16_t wasi_siflags_t;

typedef uint8_t wasi_signal_t;
#define WASI_SIGABRT    1
#define WASI_SIGALRM    2
#define WASI_SIGBUS     3
#define WASI_SIGCHLD    4
#define WASI_SIGCONT    5
#define WASI_SIGFPE     6
#define WASI_SIGHUP     7
#define WASI_SIGILL     8
#define WASI_SIGINT     9
#define WASI_SIGKILL   10
#define WASI_SIGPIPE   11
#define WASI_SIGQUIT   12
#define WASI_SIGSEGV   13
#define WASI_SIGSTOP   14
#define WASI_SIGSYS    15
#define WASI_SIGTERM   16
#define WASI_SIGTRAP   17
#define WASI_SIGTSTP   18
#define WASI_SIGTTIN   19
#define WASI_SIGTTOU   20
#define WASI_SIGURG    21
#define WASI_SIGUSR1   22
#define WASI_SIGUSR2   23
#define WASI_SIGVTALRM 24
#define WASI_SIGXCPU   25
#define WASI_SIGXFSZ   26

typedef uint16_t wasi_subclockflags_t;
#define WASI_SUBSCRIPTION_CLOCK_ABSTIME 0x0001

typedef uint16_t wasi_subrwflags_t;
#define WASI_SUBSCRIPTION_FD_READWRITE_POLL 0x0001

typedef uint32_t wasi_tid_t;

typedef uint64_t wasi_timestamp_t;

typedef uint8_t wasi_ulflags_t;
#define WASI_UNLINK_REMOVEDIR 0x01

typedef uint64_t wasi_userdata_t;

typedef uint8_t wasi_whence_t;
#define WASI_WHENCE_CUR 1
#define WASI_WHENCE_END 2
#define WASI_WHENCE_SET 3

typedef struct {
  _Alignas(8) wasi_dircookie_t d_next;
  _Alignas(8) wasi_inode_t d_ino;
  _Alignas(4) uint32_t d_namlen;
  _Alignas(1) wasi_filetype_t d_type;
} wasi_dirent_t;
_Static_assert(offsetof(wasi_dirent_t, d_next) == 0, "Incorrect layout");
_Static_assert(offsetof(wasi_dirent_t, d_ino) == 8, "Incorrect layout");
_Static_assert(offsetof(wasi_dirent_t, d_namlen) == 16, "Incorrect layout");
_Static_assert(offsetof(wasi_dirent_t, d_type) == 20, "Incorrect layout");
_Static_assert(sizeof(wasi_dirent_t) == 24, "Incorrect layout");
_Static_assert(_Alignof(wasi_dirent_t) == 8, "Incorrect layout");

typedef struct {
  _Alignas(8) wasi_userdata_t userdata;
  _Alignas(2) wasi_errno_t error;
  _Alignas(1) wasi_eventtype_t type;
  union {
    struct {
      _Alignas(8) wasi_filesize_t nbytes;
      _Alignas(1) char unused[4];
      _Alignas(2) wasi_eventrwflags_t flags;
    } fd_readwrite;
    struct {
      _Alignas(1) char unused[4];
      _Alignas(1) wasi_signal_t signal;
      _Alignas(4) wasi_exitcode_t exitcode;
    } proc_terminate;
  };
} wasi_event_t;
_Static_assert(offsetof(wasi_event_t, userdata) == 0, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, error) == 8, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, type) == 10, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, fd_readwrite.nbytes) == 16, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, fd_readwrite.unused) == 24, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, fd_readwrite.flags) == 28, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, proc_terminate.unused) == 16, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, proc_terminate.signal) == 20, "Incorrect layout");
_Static_assert(offsetof(wasi_event_t, proc_terminate.exitcode) == 24, "Incorrect layout");
_Static_assert(sizeof(wasi_event_t) == 32, "Incorrect layout");
_Static_assert(_Alignof(wasi_event_t) == 8, "Incorrect layout");

typedef struct {
  _Alignas(1) wasi_filetype_t fs_filetype;
  _Alignas(2) wasi_fdflags_t fs_flags;
  _Alignas(8) wasi_rights_t fs_rights_base;
  _Alignas(8) wasi_rights_t fs_rights_inheriting;
} wasi_fdstat_t;
_Static_assert(offsetof(wasi_fdstat_t, fs_filetype) == 0, "Incorrect layout");
_Static_assert(offsetof(wasi_fdstat_t, fs_flags) == 2, "Incorrect layout");
_Static_assert(offsetof(wasi_fdstat_t, fs_rights_base) == 8, "Incorrect layout");
_Static_assert(offsetof(wasi_fdstat_t, fs_rights_inheriting) == 16, "Incorrect layout");
_Static_assert(sizeof(wasi_fdstat_t) == 24, "Incorrect layout");
_Static_assert(_Alignof(wasi_fdstat_t) == 8, "Incorrect layout");

typedef struct {
  _Alignas(8) wasi_device_t st_dev;
  _Alignas(8) wasi_inode_t st_ino;
  _Alignas(1) wasi_filetype_t st_filetype;
  _Alignas(4) wasi_linkcount_t st_nlink;
  _Alignas(8) wasi_filesize_t st_size;
  _Alignas(8) wasi_timestamp_t st_atim;
  _Alignas(8) wasi_timestamp_t st_mtim;
  _Alignas(8) wasi_timestamp_t st_ctim;
} wasi_filestat_t;
_Static_assert(offsetof(wasi_filestat_t, st_dev) == 0, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_ino) == 8, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_filetype) == 16, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_nlink) == 20, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_size) == 24, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_atim) == 32, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_mtim) == 40, "Incorrect layout");
_Static_assert(offsetof(wasi_filestat_t, st_ctim) == 48, "Incorrect layout");
_Static_assert(sizeof(wasi_filestat_t) == 56, "Incorrect layout");
_Static_assert(_Alignof(wasi_filestat_t) == 8, "Incorrect layout");

typedef struct {
  _Alignas(4) wasi_fd_t fd;
  _Alignas(4) wasi_lookupflags_t flags;
} wasi_lookup_t;
_Static_assert(offsetof(wasi_lookup_t, fd) == 0, "Incorrect layout");
_Static_assert(offsetof(wasi_lookup_t, flags) == 4, "Incorrect layout");
_Static_assert(sizeof(wasi_lookup_t) == 8, "Incorrect layout");
_Static_assert(_Alignof(wasi_lookup_t) == 4, "Incorrect layout");

#ifdef __cplusplus
}  // extern "C"
#endif

#endif
